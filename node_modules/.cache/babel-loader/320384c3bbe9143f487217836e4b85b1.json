{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { get, getDatabase, orderByKey, query, ref } from \"firebase/database\";\nimport { useEffect, useState } from \"react\";\nexport default function useAnswers(videoID) {\n  _s();\n\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(false);\n  const [answers, setAnswers] = useState([]);\n  useEffect(() => {\n    async function fetchAnswers() {\n      const db = getDatabase();\n      const answerRef = ref(db, \"answers/\" + videoID + \"/questions\");\n      const answerQuery = query(answerRef, orderByKey());\n\n      try {\n        setError(false);\n        setLoading(true);\n        const snapshot = await get(answerQuery);\n        setLoading(false);\n\n        if (snapshot.exists()) {\n          setAnswers(prevAnswers => {\n            return [...prevAnswers, ...Object.values(snapshot.val())];\n          });\n        }\n      } catch (err) {\n        console.log(err);\n        setLoading(false);\n        setError(true);\n      }\n    }\n\n    fetchAnswers();\n  }, [videoID]);\n  return {\n    loading,\n    error,\n    answers\n  };\n}\n\n_s(useAnswers, \"LJeXvbyKmS/toQM5JiIp3riUxdw=\");","map":{"version":3,"names":["get","getDatabase","orderByKey","query","ref","useEffect","useState","useAnswers","videoID","loading","setLoading","error","setError","answers","setAnswers","fetchAnswers","db","answerRef","answerQuery","snapshot","exists","prevAnswers","Object","values","val","err","console","log"],"sources":["C:/Users/abdul/Desktop/lws app/src/hooks/useAnswers.js"],"sourcesContent":["import { get, getDatabase, orderByKey, query, ref } from \"firebase/database\";\nimport { useEffect, useState } from \"react\";\n\nexport default function useAnswers(videoID) {\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(false);\n  const [answers, setAnswers] = useState([]);\n\n  useEffect(() => {\n    async function fetchAnswers() {\n      const db = getDatabase();\n      const answerRef = ref(db, \"answers/\" + videoID + \"/questions\");\n      const answerQuery = query(answerRef, orderByKey());\n\n      try {\n        setError(false);\n        setLoading(true);\n        const snapshot = await get(answerQuery);\n        setLoading(false);\n        if (snapshot.exists()) {\n          setAnswers((prevAnswers) => {\n            return [...prevAnswers, ...Object.values(snapshot.val())];\n          });\n        }\n      } catch (err) {\n        console.log(err);\n        setLoading(false);\n        setError(true);\n      }\n    }\n\n    fetchAnswers();\n  }, [videoID]);\n\n  return {\n    loading,\n    error,\n    answers,\n  };\n}\n"],"mappings":";;AAAA,SAASA,GAAT,EAAcC,WAAd,EAA2BC,UAA3B,EAAuCC,KAAvC,EAA8CC,GAA9C,QAAyD,mBAAzD;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAEA,eAAe,SAASC,UAAT,CAAoBC,OAApB,EAA6B;EAAA;;EAC1C,MAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBJ,QAAQ,CAAC,IAAD,CAAtC;EACA,MAAM,CAACK,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,KAAD,CAAlC;EACA,MAAM,CAACO,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAAC,EAAD,CAAtC;EAEAD,SAAS,CAAC,MAAM;IACd,eAAeU,YAAf,GAA8B;MAC5B,MAAMC,EAAE,GAAGf,WAAW,EAAtB;MACA,MAAMgB,SAAS,GAAGb,GAAG,CAACY,EAAD,EAAK,aAAaR,OAAb,GAAuB,YAA5B,CAArB;MACA,MAAMU,WAAW,GAAGf,KAAK,CAACc,SAAD,EAAYf,UAAU,EAAtB,CAAzB;;MAEA,IAAI;QACFU,QAAQ,CAAC,KAAD,CAAR;QACAF,UAAU,CAAC,IAAD,CAAV;QACA,MAAMS,QAAQ,GAAG,MAAMnB,GAAG,CAACkB,WAAD,CAA1B;QACAR,UAAU,CAAC,KAAD,CAAV;;QACA,IAAIS,QAAQ,CAACC,MAAT,EAAJ,EAAuB;UACrBN,UAAU,CAAEO,WAAD,IAAiB;YAC1B,OAAO,CAAC,GAAGA,WAAJ,EAAiB,GAAGC,MAAM,CAACC,MAAP,CAAcJ,QAAQ,CAACK,GAAT,EAAd,CAApB,CAAP;UACD,CAFS,CAAV;QAGD;MACF,CAVD,CAUE,OAAOC,GAAP,EAAY;QACZC,OAAO,CAACC,GAAR,CAAYF,GAAZ;QACAf,UAAU,CAAC,KAAD,CAAV;QACAE,QAAQ,CAAC,IAAD,CAAR;MACD;IACF;;IAEDG,YAAY;EACb,CAxBQ,EAwBN,CAACP,OAAD,CAxBM,CAAT;EA0BA,OAAO;IACLC,OADK;IAELE,KAFK;IAGLE;EAHK,CAAP;AAKD;;GApCuBN,U"},"metadata":{},"sourceType":"module"}