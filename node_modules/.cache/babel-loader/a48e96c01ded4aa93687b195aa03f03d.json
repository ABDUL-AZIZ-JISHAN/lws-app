{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { get, getDatabase, orderByKey, query, ref } from \"firebase/database\";\nimport { useEffect, useState } from \"react\";\nexport default function useQuestions(videoID) {\n  _s();\n\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(false);\n  const [questions, setQuestions] = useState([]);\n  useEffect(() => {\n    async function fetchQuestions() {\n      const db = getDatabase();\n      const quizRef = ref(db, \"quiz/\" + videoID + \"/questions\");\n      const quizQuery = query(quizRef, orderByKey());\n\n      try {\n        setError(false);\n        setLoading(true);\n        const snapshot = await get(quizQuery);\n        setLoading(false);\n\n        if (snapshot.exists()) {\n          setQuestions(prevQuestions => {\n            return [...prevQuestions, ...Object.values(snapshot.val())];\n          });\n        }\n      } catch (err) {\n        console.log(err);\n        setLoading(false);\n        setError(true);\n      }\n    }\n\n    fetchQuestions();\n  }, [videoID]);\n  return {\n    loading,\n    error,\n    questions\n  };\n}\n\n_s(useQuestions, \"Mm32FY5+7+By1LFeKSLK9qnaUmQ=\");","map":{"version":3,"names":["get","getDatabase","orderByKey","query","ref","useEffect","useState","useQuestions","videoID","loading","setLoading","error","setError","questions","setQuestions","fetchQuestions","db","quizRef","quizQuery","snapshot","exists","prevQuestions","Object","values","val","err","console","log"],"sources":["C:/Users/abdul/Desktop/final-app/src/hooks/useQuestions.js"],"sourcesContent":["import { get, getDatabase, orderByKey, query, ref } from \"firebase/database\";\nimport { useEffect, useState } from \"react\";\n\nexport default function useQuestions(videoID) {\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(false);\n  const [questions, setQuestions] = useState([]);\n\n  useEffect(() => {\n    async function fetchQuestions() {\n      const db = getDatabase();\n      const quizRef = ref(db, \"quiz/\" + videoID + \"/questions\");\n      const quizQuery = query(quizRef, orderByKey());\n      try {\n        setError(false);\n        setLoading(true);\n        const snapshot = await get(quizQuery);\n        setLoading(false);\n        if (snapshot.exists()) {\n          setQuestions((prevQuestions) => {\n            return [...prevQuestions, ...Object.values(snapshot.val())];\n          });\n        }\n      } catch (err) {\n        console.log(err);\n        setLoading(false);\n        setError(true);\n      }\n    }\n    fetchQuestions();\n  }, [videoID]);\n  return {\n    loading,\n    error,\n    questions,\n  };\n}\n"],"mappings":";;AAAA,SAASA,GAAT,EAAcC,WAAd,EAA2BC,UAA3B,EAAuCC,KAAvC,EAA8CC,GAA9C,QAAyD,mBAAzD;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAEA,eAAe,SAASC,YAAT,CAAsBC,OAAtB,EAA+B;EAAA;;EAC5C,MAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBJ,QAAQ,CAAC,IAAD,CAAtC;EACA,MAAM,CAACK,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,KAAD,CAAlC;EACA,MAAM,CAACO,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAC,EAAD,CAA1C;EAEAD,SAAS,CAAC,MAAM;IACd,eAAeU,cAAf,GAAgC;MAC9B,MAAMC,EAAE,GAAGf,WAAW,EAAtB;MACA,MAAMgB,OAAO,GAAGb,GAAG,CAACY,EAAD,EAAK,UAAUR,OAAV,GAAoB,YAAzB,CAAnB;MACA,MAAMU,SAAS,GAAGf,KAAK,CAACc,OAAD,EAAUf,UAAU,EAApB,CAAvB;;MACA,IAAI;QACFU,QAAQ,CAAC,KAAD,CAAR;QACAF,UAAU,CAAC,IAAD,CAAV;QACA,MAAMS,QAAQ,GAAG,MAAMnB,GAAG,CAACkB,SAAD,CAA1B;QACAR,UAAU,CAAC,KAAD,CAAV;;QACA,IAAIS,QAAQ,CAACC,MAAT,EAAJ,EAAuB;UACrBN,YAAY,CAAEO,aAAD,IAAmB;YAC9B,OAAO,CAAC,GAAGA,aAAJ,EAAmB,GAAGC,MAAM,CAACC,MAAP,CAAcJ,QAAQ,CAACK,GAAT,EAAd,CAAtB,CAAP;UACD,CAFW,CAAZ;QAGD;MACF,CAVD,CAUE,OAAOC,GAAP,EAAY;QACZC,OAAO,CAACC,GAAR,CAAYF,GAAZ;QACAf,UAAU,CAAC,KAAD,CAAV;QACAE,QAAQ,CAAC,IAAD,CAAR;MACD;IACF;;IACDG,cAAc;EACf,CAtBQ,EAsBN,CAACP,OAAD,CAtBM,CAAT;EAuBA,OAAO;IACLC,OADK;IAELE,KAFK;IAGLE;EAHK,CAAP;AAKD;;GAjCuBN,Y"},"metadata":{},"sourceType":"module"}