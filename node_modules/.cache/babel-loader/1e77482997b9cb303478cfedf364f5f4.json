{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\abdul\\\\Desktop\\\\final-app\\\\src\\\\components\\\\pages\\\\Quiz.js\",\n    _s = $RefreshSig$();\n\nimport { getDatabase, ref, set } from \"firebase/database\";\nimport _ from \"lodash\";\nimport { useEffect, useReducer, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { useAuth } from \"../../contexts/AuthContext\";\nimport useQuestions from \"../../hooks/useQuestions\";\nimport Answers from \"../Answers\";\nimport MiniPlayer from \"../MiniPlayer\";\nimport ProgressBar from \"../ProgressBar\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst initialState = null;\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"questions\":\n      action.value.forEach(question => {\n        question.options.forEach(option => {\n          option.checked = false;\n        });\n      });\n      return action.value;\n\n    case \"answer\":\n      const questions = _.cloneDeep(state);\n\n      questions[action.questionID].options[action.optionIndex].checked = action.value;\n      return questions;\n\n    default:\n      return state;\n  }\n};\n\nexport default function Quiz() {\n  _s();\n\n  const {\n    id\n  } = useParams();\n  const {\n    loading,\n    error,\n    questions\n  } = useQuestions(id);\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [qna, dispatch] = useReducer(reducer, initialState);\n  const {\n    currentUser\n  } = useAuth();\n  const history = useHistory();\n  const {\n    location\n  } = history;\n  const {\n    state\n  } = location;\n  const {\n    videoTitle\n  } = state;\n  useEffect(() => {\n    dispatch({\n      type: \"questions\",\n      value: questions\n    });\n  }, [questions]);\n\n  function handleAnswerChange(e, index) {\n    dispatch({\n      type: \"answer\",\n      questionID: currentQuestion,\n      optionIndex: index,\n      value: e.target.checked\n    });\n  } // handle when user clicks the next button to get the next question\n\n\n  function nextQuestion() {\n    if (currentQuestion + 1 < questions.length) {\n      setCurrentQuestion(prevCurrent => prevCurrent + 1);\n    }\n  } // handle when user clicks the prev button to get back to the previous question\n\n\n  function prevQuestion() {\n    if (currentQuestion >= 1 && currentQuestion <= questions.length) {\n      setCurrentQuestion(prevCurrent => prevCurrent - 1);\n    }\n  } // submit quiz\n\n\n  async function submit() {\n    const {\n      uid\n    } = currentUser;\n    const db = getDatabase();\n    const resultRef = ref(db, `result/${uid}`);\n    await set(resultRef, {\n      [id]: qna\n    });\n    history.push({\n      pathname: `/result/${id}`,\n      state: {\n        qna\n      }\n    });\n  } // calculate percentage of progress\n\n\n  const percentage = questions.length > 0 ? (currentQuestion + 1) / questions.length * 100 : 0;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading ...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 19\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"There was an error!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 17\n    }, this), !loading && !error && qna && qna.length > 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: qna[currentQuestion].title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Question can have multiple answers\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Answers, {\n        input: true,\n        options: qna[currentQuestion].options,\n        handleChange: handleAnswerChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ProgressBar, {\n        next: nextQuestion,\n        prev: prevQuestion,\n        submit: submit,\n        progress: percentage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(MiniPlayer, {\n        id: id,\n        title: videoTitle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true);\n}\n\n_s(Quiz, \"PrgkvE74DWryeGcCwc45T0xJo/g=\", false, function () {\n  return [useParams, useQuestions, useAuth, useHistory];\n});\n\n_c = Quiz;\n\nvar _c;\n\n$RefreshReg$(_c, \"Quiz\");","map":{"version":3,"names":["getDatabase","ref","set","_","useEffect","useReducer","useState","useHistory","useParams","useAuth","useQuestions","Answers","MiniPlayer","ProgressBar","initialState","reducer","state","action","type","value","forEach","question","options","option","checked","questions","cloneDeep","questionID","optionIndex","Quiz","id","loading","error","currentQuestion","setCurrentQuestion","qna","dispatch","currentUser","history","location","videoTitle","handleAnswerChange","e","index","target","nextQuestion","length","prevCurrent","prevQuestion","submit","uid","db","resultRef","push","pathname","percentage","title"],"sources":["C:/Users/abdul/Desktop/final-app/src/components/pages/Quiz.js"],"sourcesContent":["import { getDatabase, ref, set } from \"firebase/database\";\nimport _ from \"lodash\";\nimport { useEffect, useReducer, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { useAuth } from \"../../contexts/AuthContext\";\nimport useQuestions from \"../../hooks/useQuestions\";\nimport Answers from \"../Answers\";\nimport MiniPlayer from \"../MiniPlayer\";\nimport ProgressBar from \"../ProgressBar\";\n\nconst initialState = null;\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"questions\":\n      action.value.forEach((question) => {\n        question.options.forEach((option) => {\n          option.checked = false;\n        });\n      });\n      return action.value;\n    case \"answer\":\n      const questions = _.cloneDeep(state);\n      questions[action.questionID].options[action.optionIndex].checked =\n        action.value;\n\n      return questions;\n    default:\n      return state;\n  }\n};\n\nexport default function Quiz() {\n  const { id } = useParams();\n  const { loading, error, questions } = useQuestions(id);\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n\n  const [qna, dispatch] = useReducer(reducer, initialState);\n  const { currentUser } = useAuth();\n  const history = useHistory();\n  const { location } = history;\n  const { state } = location;\n  const { videoTitle } = state;\n\n  useEffect(() => {\n    dispatch({\n      type: \"questions\",\n      value: questions,\n    });\n  }, [questions]);\n\n  function handleAnswerChange(e, index) {\n    dispatch({\n      type: \"answer\",\n      questionID: currentQuestion,\n      optionIndex: index,\n      value: e.target.checked,\n    });\n  }\n\n  // handle when user clicks the next button to get the next question\n  function nextQuestion() {\n    if (currentQuestion + 1 < questions.length) {\n      setCurrentQuestion((prevCurrent) => prevCurrent + 1);\n    }\n  }\n\n  // handle when user clicks the prev button to get back to the previous question\n  function prevQuestion() {\n    if (currentQuestion >= 1 && currentQuestion <= questions.length) {\n      setCurrentQuestion((prevCurrent) => prevCurrent - 1);\n    }\n  }\n\n  // submit quiz\n  async function submit() {\n    const { uid } = currentUser;\n\n    const db = getDatabase();\n    const resultRef = ref(db, `result/${uid}`);\n\n    await set(resultRef, {\n      [id]: qna,\n    });\n\n    history.push({\n      pathname: `/result/${id}`,\n      state: {\n        qna,\n      },\n    });\n  }\n\n  // calculate percentage of progress\n  const percentage =\n    questions.length > 0 ? ((currentQuestion + 1) / questions.length) * 100 : 0;\n\n  return (\n    <>\n      {loading && <div>Loading ...</div>}\n      {error && <div>There was an error!</div>}\n      {!loading && !error && qna && qna.length > 0 && (\n        <>\n          <h1>{qna[currentQuestion].title}</h1>\n          <h4>Question can have multiple answers</h4>\n          <Answers\n            input\n            options={qna[currentQuestion].options}\n            handleChange={handleAnswerChange}\n          />\n          <ProgressBar\n            next={nextQuestion}\n            prev={prevQuestion}\n            submit={submit}\n            progress={percentage}\n          />\n          <MiniPlayer id={id} title={videoTitle} />\n        </>\n      )}\n    </>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}