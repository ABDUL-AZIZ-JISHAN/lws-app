{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\abdul\\\\Desktop\\\\final-app\\\\src\\\\components\\\\pages\\\\Quiz.js\",\n    _s = $RefreshSig$();\n\nimport { useReducer, useState, useEffect } from 'react';\nimport { useParams, useHistory } from 'react-router-dom';\nimport { getDatabase, ref } from 'firebase/database';\nimport Answers from '../Answers';\nimport useQuestions from '../hooks/useQuestion';\nimport MiniPlayer from '../MiniPlayer';\nimport ProgressBar from '../ProgressBar';\nimport _ from 'loadash';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst initialState = null;\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"questions\":\n      action.value.forEach(question => {\n        question.options.forEach(option => {\n          option.checked = false;\n        });\n      });\n      return action.value;\n\n    case \"answer\":\n      const questions = _.cloneDeep(state);\n\n      questions[action.questionID].options[action.optionIndex].checked = action.value;\n      return questions;\n\n    default:\n      return state;\n  }\n};\n\nexport default function Quiz() {\n  _s();\n\n  const {\n    id\n  } = useParams();\n  const {\n    loading,\n    error,\n    questions\n  } = useQuestions(id);\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [qna, dispatch] = useReducer(reducer, initialState);\n  const {\n    currentUser\n  } = useAuth();\n  const history = useHistory();\n  useEffect(() => {\n    dispatch({\n      type: \"questions\",\n      value: questions\n    });\n  }, [questions]);\n\n  function handleAnswerChange(e, index) {\n    dispatch({\n      type: \"answer\",\n      questionID: currentQuestion,\n      optionIndex: index,\n      value: e.target.checked\n    });\n  } // handle when user clicks the next button to get the next question\n\n\n  function nextQuestion() {\n    if (currentQuestion + 1 < questions.length) {\n      setCurrentQuestion(prevCurrent => prevCurrent + 1);\n    }\n  } // handle when user clicks the prev button to get back to the previous question\n\n\n  function prevQuestion() {\n    if (currentQuestion >= 1 && currentQuestion <= questions.length) {\n      setCurrentQuestion(prevCurrent => prevCurrent - 1);\n    }\n  } // submit quiz\n\n\n  async function submit() {\n    const {\n      uid\n    } = currentUser;\n    const db = getDatabase();\n    const resultRef = ref(db, `result/${uid}`);\n    await set(resultRef, {\n      [id]: qna\n    });\n    history.push({\n      pathname: `/result/${id}`,\n      state: {\n        qna\n      }\n    });\n  }\n\n  const percentage = questions.length > 0 ? (currentQuestion + 1) / questions.length * 100 : 0;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading ...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 19\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"There was an error!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 17\n    }, this), !loading && !error && qna && qna.length > 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: qna[currentQuestion].title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Question can have multiple answers\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Answers, {\n        options: qna[currentQuestion].options,\n        handleChange: handleAnswerChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ProgressBar, {\n        next: nextQuestion,\n        prev: prevQuestion,\n        submit: submit,\n        progress: percentage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(MiniPlayer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true);\n}\n\n_s(Quiz, \"PrgkvE74DWryeGcCwc45T0xJo/g=\", true, function () {\n  return [useParams, useQuestions, useHistory];\n});\n\n_c = Quiz;\n\nvar _c;\n\n$RefreshReg$(_c, \"Quiz\");","map":{"version":3,"names":["useReducer","useState","useEffect","useParams","useHistory","getDatabase","ref","Answers","useQuestions","MiniPlayer","ProgressBar","_","initialState","reducer","state","action","type","value","forEach","question","options","option","checked","questions","cloneDeep","questionID","optionIndex","Quiz","id","loading","error","currentQuestion","setCurrentQuestion","qna","dispatch","currentUser","useAuth","history","handleAnswerChange","e","index","target","nextQuestion","length","prevCurrent","prevQuestion","submit","uid","db","resultRef","set","push","pathname","percentage","title"],"sources":["C:/Users/abdul/Desktop/final-app/src/components/pages/Quiz.js"],"sourcesContent":["import { useReducer, useState, useEffect,  } from 'react';\r\nimport { useParams, useHistory } from 'react-router-dom';\r\nimport { getDatabase, ref } from 'firebase/database';\r\nimport Answers from '../Answers';\r\nimport useQuestions from '../hooks/useQuestion';\r\nimport MiniPlayer from '../MiniPlayer';\r\nimport ProgressBar from '../ProgressBar';\r\nimport _ from 'loadash'\r\nconst initialState = null;\r\n\r\nconst reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"questions\":\r\n      action.value.forEach((question) => {\r\n        question.options.forEach((option) => {\r\n          option.checked = false;\r\n        });\r\n      });\r\n      return action.value;\r\n    case \"answer\":\r\n      const questions = _.cloneDeep(state);\r\n      questions[action.questionID].options[action.optionIndex].checked =\r\n        action.value;\r\n\r\n      return questions;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default function Quiz() {\r\n  const { id } = useParams();\r\n  const { loading, error, questions } = useQuestions(id);\r\n  const [currentQuestion, setCurrentQuestion] = useState(0);\r\n\r\n  const [qna, dispatch] = useReducer(reducer, initialState);\r\n  const { currentUser } = useAuth();\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    dispatch({\r\n      type: \"questions\",\r\n      value: questions,\r\n    });\r\n  }, [questions]);\r\n\r\n  function handleAnswerChange(e, index) {\r\n    dispatch({\r\n      type: \"answer\",\r\n      questionID: currentQuestion,\r\n      optionIndex: index,\r\n      value: e.target.checked,\r\n    });\r\n  }\r\n\r\n  // handle when user clicks the next button to get the next question\r\n  function nextQuestion() {\r\n    if (currentQuestion + 1 < questions.length) {\r\n      setCurrentQuestion((prevCurrent) => prevCurrent + 1);\r\n    }\r\n  }\r\n\r\n  // handle when user clicks the prev button to get back to the previous question\r\n  function prevQuestion() {\r\n    if (currentQuestion >= 1 && currentQuestion <= questions.length) {\r\n      setCurrentQuestion((prevCurrent) => prevCurrent - 1);\r\n    }\r\n  }\r\n\r\n  // submit quiz\r\n  async function submit() {\r\n    const { uid } = currentUser;\r\n\r\n    const db = getDatabase();\r\n    const resultRef = ref(db, `result/${uid}`);\r\n\r\n    await set(resultRef, {\r\n      [id]: qna,\r\n    });\r\n\r\n    history.push({\r\n      pathname: `/result/${id}`,\r\n      state: {\r\n        qna,\r\n      },\r\n    });\r\n  }\r\n\r\n\r\n  const percentage =\r\n    questions.length > 0 ? ((currentQuestion + 1) / questions.length) * 100 : 0;\r\n\r\n  return (\r\n    <>\r\n      {loading && <div>Loading ...</div>}\r\n      {error && <div>There was an error!</div>}\r\n      {!loading && !error && qna && qna.length > 0 && (\r\n        <>\r\n          <h1>{qna[currentQuestion].title}</h1>\r\n          <h4>Question can have multiple answers</h4>\r\n          <Answers\r\n            options={qna[currentQuestion].options}\r\n            handleChange={handleAnswerChange}\r\n          />\r\n          <ProgressBar\r\n            next={nextQuestion}\r\n            prev={prevQuestion}\r\n            submit={submit}\r\n            progress={percentage}\r\n          />\r\n          <MiniPlayer />\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}